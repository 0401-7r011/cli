// Code generated by counterfeiter. DO NOT EDIT.
package rpcfakes

import (
	"sync"

	"code.cloudfoundry.org/cli/plugin/v7/rpc"
	"code.cloudfoundry.org/cli/util/ui"
)

type FakeCommandParser struct {
	ParseCommandFromArgsStub        func(*ui.UI, []string) (int, error)
	parseCommandFromArgsMutex       sync.RWMutex
	parseCommandFromArgsArgsForCall []struct {
		arg1 *ui.UI
		arg2 []string
	}
	parseCommandFromArgsReturns struct {
		result1 int
		result2 error
	}
	parseCommandFromArgsReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCommandParser) ParseCommandFromArgs(arg1 *ui.UI, arg2 []string) (int, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.parseCommandFromArgsMutex.Lock()
	ret, specificReturn := fake.parseCommandFromArgsReturnsOnCall[len(fake.parseCommandFromArgsArgsForCall)]
	fake.parseCommandFromArgsArgsForCall = append(fake.parseCommandFromArgsArgsForCall, struct {
		arg1 *ui.UI
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("ParseCommandFromArgs", []interface{}{arg1, arg2Copy})
	fake.parseCommandFromArgsMutex.Unlock()
	if fake.ParseCommandFromArgsStub != nil {
		return fake.ParseCommandFromArgsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parseCommandFromArgsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCommandParser) ParseCommandFromArgsCallCount() int {
	fake.parseCommandFromArgsMutex.RLock()
	defer fake.parseCommandFromArgsMutex.RUnlock()
	return len(fake.parseCommandFromArgsArgsForCall)
}

func (fake *FakeCommandParser) ParseCommandFromArgsCalls(stub func(*ui.UI, []string) (int, error)) {
	fake.parseCommandFromArgsMutex.Lock()
	defer fake.parseCommandFromArgsMutex.Unlock()
	fake.ParseCommandFromArgsStub = stub
}

func (fake *FakeCommandParser) ParseCommandFromArgsArgsForCall(i int) (*ui.UI, []string) {
	fake.parseCommandFromArgsMutex.RLock()
	defer fake.parseCommandFromArgsMutex.RUnlock()
	argsForCall := fake.parseCommandFromArgsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCommandParser) ParseCommandFromArgsReturns(result1 int, result2 error) {
	fake.parseCommandFromArgsMutex.Lock()
	defer fake.parseCommandFromArgsMutex.Unlock()
	fake.ParseCommandFromArgsStub = nil
	fake.parseCommandFromArgsReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandParser) ParseCommandFromArgsReturnsOnCall(i int, result1 int, result2 error) {
	fake.parseCommandFromArgsMutex.Lock()
	defer fake.parseCommandFromArgsMutex.Unlock()
	fake.ParseCommandFromArgsStub = nil
	if fake.parseCommandFromArgsReturnsOnCall == nil {
		fake.parseCommandFromArgsReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.parseCommandFromArgsReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeCommandParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parseCommandFromArgsMutex.RLock()
	defer fake.parseCommandFromArgsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCommandParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ rpc.CommandParser = new(FakeCommandParser)
