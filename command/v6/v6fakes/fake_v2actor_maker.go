// Code generated by counterfeiter. DO NOT EDIT.
package v6fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/command"
	v6 "code.cloudfoundry.org/cli/command/v6"
)

type FakeV2ActorMaker struct {
	NewV2ActorStub        func(command.Config, command.UI, bool) (v6.V2LoginActor, error)
	newV2ActorMutex       sync.RWMutex
	newV2ActorArgsForCall []struct {
		arg1 command.Config
		arg2 command.UI
		arg3 bool
	}
	newV2ActorReturns struct {
		result1 v6.V2LoginActor
		result2 error
	}
	newV2ActorReturnsOnCall map[int]struct {
		result1 v6.V2LoginActor
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeV2ActorMaker) NewV2Actor(arg1 command.Config, arg2 command.UI, arg3 bool) (v6.V2LoginActor, error) {
	fake.newV2ActorMutex.Lock()
	ret, specificReturn := fake.newV2ActorReturnsOnCall[len(fake.newV2ActorArgsForCall)]
	fake.newV2ActorArgsForCall = append(fake.newV2ActorArgsForCall, struct {
		arg1 command.Config
		arg2 command.UI
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("NewV2Actor", []interface{}{arg1, arg2, arg3})
	fake.newV2ActorMutex.Unlock()
	if fake.NewV2ActorStub != nil {
		return fake.NewV2ActorStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.newV2ActorReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeV2ActorMaker) NewV2ActorCallCount() int {
	fake.newV2ActorMutex.RLock()
	defer fake.newV2ActorMutex.RUnlock()
	return len(fake.newV2ActorArgsForCall)
}

func (fake *FakeV2ActorMaker) NewV2ActorCalls(stub func(command.Config, command.UI, bool) (v6.V2LoginActor, error)) {
	fake.newV2ActorMutex.Lock()
	defer fake.newV2ActorMutex.Unlock()
	fake.NewV2ActorStub = stub
}

func (fake *FakeV2ActorMaker) NewV2ActorArgsForCall(i int) (command.Config, command.UI, bool) {
	fake.newV2ActorMutex.RLock()
	defer fake.newV2ActorMutex.RUnlock()
	argsForCall := fake.newV2ActorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeV2ActorMaker) NewV2ActorReturns(result1 v6.V2LoginActor, result2 error) {
	fake.newV2ActorMutex.Lock()
	defer fake.newV2ActorMutex.Unlock()
	fake.NewV2ActorStub = nil
	fake.newV2ActorReturns = struct {
		result1 v6.V2LoginActor
		result2 error
	}{result1, result2}
}

func (fake *FakeV2ActorMaker) NewV2ActorReturnsOnCall(i int, result1 v6.V2LoginActor, result2 error) {
	fake.newV2ActorMutex.Lock()
	defer fake.newV2ActorMutex.Unlock()
	fake.NewV2ActorStub = nil
	if fake.newV2ActorReturnsOnCall == nil {
		fake.newV2ActorReturnsOnCall = make(map[int]struct {
			result1 v6.V2LoginActor
			result2 error
		})
	}
	fake.newV2ActorReturnsOnCall[i] = struct {
		result1 v6.V2LoginActor
		result2 error
	}{result1, result2}
}

func (fake *FakeV2ActorMaker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newV2ActorMutex.RLock()
	defer fake.newV2ActorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeV2ActorMaker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v6.V2ActorMaker = new(FakeV2ActorMaker)
