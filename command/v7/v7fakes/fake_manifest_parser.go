// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	v7 "code.cloudfoundry.org/cli/command/v7"
	"github.com/cloudfoundry/bosh-cli/director/template"
)

type FakeManifestParser struct {
	FullRawManifestStub        func() []byte
	fullRawManifestMutex       sync.RWMutex
	fullRawManifestArgsForCall []struct {
	}
	fullRawManifestReturns struct {
		result1 []byte
	}
	fullRawManifestReturnsOnCall map[int]struct {
		result1 []byte
	}
	InterpolateAndParseStub        func(string, []string, []template.VarKV, string) error
	interpolateAndParseMutex       sync.RWMutex
	interpolateAndParseArgsForCall []struct {
		arg1 string
		arg2 []string
		arg3 []template.VarKV
		arg4 string
	}
	interpolateAndParseReturns struct {
		result1 error
	}
	interpolateAndParseReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestParser) FullRawManifest() []byte {
	fake.fullRawManifestMutex.Lock()
	ret, specificReturn := fake.fullRawManifestReturnsOnCall[len(fake.fullRawManifestArgsForCall)]
	fake.fullRawManifestArgsForCall = append(fake.fullRawManifestArgsForCall, struct {
	}{})
	fake.recordInvocation("FullRawManifest", []interface{}{})
	fake.fullRawManifestMutex.Unlock()
	if fake.FullRawManifestStub != nil {
		return fake.FullRawManifestStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.fullRawManifestReturns
	return fakeReturns.result1
}

func (fake *FakeManifestParser) FullRawManifestCallCount() int {
	fake.fullRawManifestMutex.RLock()
	defer fake.fullRawManifestMutex.RUnlock()
	return len(fake.fullRawManifestArgsForCall)
}

func (fake *FakeManifestParser) FullRawManifestCalls(stub func() []byte) {
	fake.fullRawManifestMutex.Lock()
	defer fake.fullRawManifestMutex.Unlock()
	fake.FullRawManifestStub = stub
}

func (fake *FakeManifestParser) FullRawManifestReturns(result1 []byte) {
	fake.fullRawManifestMutex.Lock()
	defer fake.fullRawManifestMutex.Unlock()
	fake.FullRawManifestStub = nil
	fake.fullRawManifestReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeManifestParser) FullRawManifestReturnsOnCall(i int, result1 []byte) {
	fake.fullRawManifestMutex.Lock()
	defer fake.fullRawManifestMutex.Unlock()
	fake.FullRawManifestStub = nil
	if fake.fullRawManifestReturnsOnCall == nil {
		fake.fullRawManifestReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.fullRawManifestReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeManifestParser) InterpolateAndParse(arg1 string, arg2 []string, arg3 []template.VarKV, arg4 string) error {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	var arg3Copy []template.VarKV
	if arg3 != nil {
		arg3Copy = make([]template.VarKV, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.interpolateAndParseMutex.Lock()
	ret, specificReturn := fake.interpolateAndParseReturnsOnCall[len(fake.interpolateAndParseArgsForCall)]
	fake.interpolateAndParseArgsForCall = append(fake.interpolateAndParseArgsForCall, struct {
		arg1 string
		arg2 []string
		arg3 []template.VarKV
		arg4 string
	}{arg1, arg2Copy, arg3Copy, arg4})
	fake.recordInvocation("InterpolateAndParse", []interface{}{arg1, arg2Copy, arg3Copy, arg4})
	fake.interpolateAndParseMutex.Unlock()
	if fake.InterpolateAndParseStub != nil {
		return fake.InterpolateAndParseStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.interpolateAndParseReturns
	return fakeReturns.result1
}

func (fake *FakeManifestParser) InterpolateAndParseCallCount() int {
	fake.interpolateAndParseMutex.RLock()
	defer fake.interpolateAndParseMutex.RUnlock()
	return len(fake.interpolateAndParseArgsForCall)
}

func (fake *FakeManifestParser) InterpolateAndParseCalls(stub func(string, []string, []template.VarKV, string) error) {
	fake.interpolateAndParseMutex.Lock()
	defer fake.interpolateAndParseMutex.Unlock()
	fake.InterpolateAndParseStub = stub
}

func (fake *FakeManifestParser) InterpolateAndParseArgsForCall(i int) (string, []string, []template.VarKV, string) {
	fake.interpolateAndParseMutex.RLock()
	defer fake.interpolateAndParseMutex.RUnlock()
	argsForCall := fake.interpolateAndParseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeManifestParser) InterpolateAndParseReturns(result1 error) {
	fake.interpolateAndParseMutex.Lock()
	defer fake.interpolateAndParseMutex.Unlock()
	fake.InterpolateAndParseStub = nil
	fake.interpolateAndParseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManifestParser) InterpolateAndParseReturnsOnCall(i int, result1 error) {
	fake.interpolateAndParseMutex.Lock()
	defer fake.interpolateAndParseMutex.Unlock()
	fake.InterpolateAndParseStub = nil
	if fake.interpolateAndParseReturnsOnCall == nil {
		fake.interpolateAndParseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.interpolateAndParseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManifestParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.fullRawManifestMutex.RLock()
	defer fake.fullRawManifestMutex.RUnlock()
	fake.interpolateAndParseMutex.RLock()
	defer fake.interpolateAndParseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.ManifestParser = new(FakeManifestParser)
