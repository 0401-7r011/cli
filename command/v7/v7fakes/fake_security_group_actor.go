// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeSecurityGroupActor struct {
	GetSecurityGroupSummaryStub        func(string) (v7action.SecurityGroupSummary, v7action.Warnings, error)
	getSecurityGroupSummaryMutex       sync.RWMutex
	getSecurityGroupSummaryArgsForCall []struct {
		arg1 string
	}
	getSecurityGroupSummaryReturns struct {
		result1 v7action.SecurityGroupSummary
		result2 v7action.Warnings
		result3 error
	}
	getSecurityGroupSummaryReturnsOnCall map[int]struct {
		result1 v7action.SecurityGroupSummary
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummary(arg1 string) (v7action.SecurityGroupSummary, v7action.Warnings, error) {
	fake.getSecurityGroupSummaryMutex.Lock()
	ret, specificReturn := fake.getSecurityGroupSummaryReturnsOnCall[len(fake.getSecurityGroupSummaryArgsForCall)]
	fake.getSecurityGroupSummaryArgsForCall = append(fake.getSecurityGroupSummaryArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetSecurityGroupSummary", []interface{}{arg1})
	fake.getSecurityGroupSummaryMutex.Unlock()
	if fake.GetSecurityGroupSummaryStub != nil {
		return fake.GetSecurityGroupSummaryStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getSecurityGroupSummaryReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummaryCallCount() int {
	fake.getSecurityGroupSummaryMutex.RLock()
	defer fake.getSecurityGroupSummaryMutex.RUnlock()
	return len(fake.getSecurityGroupSummaryArgsForCall)
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummaryCalls(stub func(string) (v7action.SecurityGroupSummary, v7action.Warnings, error)) {
	fake.getSecurityGroupSummaryMutex.Lock()
	defer fake.getSecurityGroupSummaryMutex.Unlock()
	fake.GetSecurityGroupSummaryStub = stub
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummaryArgsForCall(i int) string {
	fake.getSecurityGroupSummaryMutex.RLock()
	defer fake.getSecurityGroupSummaryMutex.RUnlock()
	argsForCall := fake.getSecurityGroupSummaryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummaryReturns(result1 v7action.SecurityGroupSummary, result2 v7action.Warnings, result3 error) {
	fake.getSecurityGroupSummaryMutex.Lock()
	defer fake.getSecurityGroupSummaryMutex.Unlock()
	fake.GetSecurityGroupSummaryStub = nil
	fake.getSecurityGroupSummaryReturns = struct {
		result1 v7action.SecurityGroupSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupActor) GetSecurityGroupSummaryReturnsOnCall(i int, result1 v7action.SecurityGroupSummary, result2 v7action.Warnings, result3 error) {
	fake.getSecurityGroupSummaryMutex.Lock()
	defer fake.getSecurityGroupSummaryMutex.Unlock()
	fake.GetSecurityGroupSummaryStub = nil
	if fake.getSecurityGroupSummaryReturnsOnCall == nil {
		fake.getSecurityGroupSummaryReturnsOnCall = make(map[int]struct {
			result1 v7action.SecurityGroupSummary
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getSecurityGroupSummaryReturnsOnCall[i] = struct {
		result1 v7action.SecurityGroupSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSecurityGroupActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSecurityGroupSummaryMutex.RLock()
	defer fake.getSecurityGroupSummaryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityGroupActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.SecurityGroupActor = new(FakeSecurityGroupActor)
