// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeRoutesActor struct {
	GetRouteSummariesStub        func([]v7action.Route) ([]v7action.RouteSummary, v7action.Warnings, error)
	getRouteSummariesMutex       sync.RWMutex
	getRouteSummariesArgsForCall []struct {
		arg1 []v7action.Route
	}
	getRouteSummariesReturns struct {
		result1 []v7action.RouteSummary
		result2 v7action.Warnings
		result3 error
	}
	getRouteSummariesReturnsOnCall map[int]struct {
		result1 []v7action.RouteSummary
		result2 v7action.Warnings
		result3 error
	}
	GetRoutesByOrgStub        func(string, string) ([]v7action.Route, v7action.Warnings, error)
	getRoutesByOrgMutex       sync.RWMutex
	getRoutesByOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getRoutesByOrgReturns struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}
	getRoutesByOrgReturnsOnCall map[int]struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}
	GetRoutesBySpaceStub        func(string, string) ([]v7action.Route, v7action.Warnings, error)
	getRoutesBySpaceMutex       sync.RWMutex
	getRoutesBySpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getRoutesBySpaceReturns struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}
	getRoutesBySpaceReturnsOnCall map[int]struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRoutesActor) GetRouteSummaries(arg1 []v7action.Route) ([]v7action.RouteSummary, v7action.Warnings, error) {
	var arg1Copy []v7action.Route
	if arg1 != nil {
		arg1Copy = make([]v7action.Route, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getRouteSummariesMutex.Lock()
	ret, specificReturn := fake.getRouteSummariesReturnsOnCall[len(fake.getRouteSummariesArgsForCall)]
	fake.getRouteSummariesArgsForCall = append(fake.getRouteSummariesArgsForCall, struct {
		arg1 []v7action.Route
	}{arg1Copy})
	fake.recordInvocation("GetRouteSummaries", []interface{}{arg1Copy})
	fake.getRouteSummariesMutex.Unlock()
	if fake.GetRouteSummariesStub != nil {
		return fake.GetRouteSummariesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getRouteSummariesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRoutesActor) GetRouteSummariesCallCount() int {
	fake.getRouteSummariesMutex.RLock()
	defer fake.getRouteSummariesMutex.RUnlock()
	return len(fake.getRouteSummariesArgsForCall)
}

func (fake *FakeRoutesActor) GetRouteSummariesCalls(stub func([]v7action.Route) ([]v7action.RouteSummary, v7action.Warnings, error)) {
	fake.getRouteSummariesMutex.Lock()
	defer fake.getRouteSummariesMutex.Unlock()
	fake.GetRouteSummariesStub = stub
}

func (fake *FakeRoutesActor) GetRouteSummariesArgsForCall(i int) []v7action.Route {
	fake.getRouteSummariesMutex.RLock()
	defer fake.getRouteSummariesMutex.RUnlock()
	argsForCall := fake.getRouteSummariesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRoutesActor) GetRouteSummariesReturns(result1 []v7action.RouteSummary, result2 v7action.Warnings, result3 error) {
	fake.getRouteSummariesMutex.Lock()
	defer fake.getRouteSummariesMutex.Unlock()
	fake.GetRouteSummariesStub = nil
	fake.getRouteSummariesReturns = struct {
		result1 []v7action.RouteSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) GetRouteSummariesReturnsOnCall(i int, result1 []v7action.RouteSummary, result2 v7action.Warnings, result3 error) {
	fake.getRouteSummariesMutex.Lock()
	defer fake.getRouteSummariesMutex.Unlock()
	fake.GetRouteSummariesStub = nil
	if fake.getRouteSummariesReturnsOnCall == nil {
		fake.getRouteSummariesReturnsOnCall = make(map[int]struct {
			result1 []v7action.RouteSummary
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getRouteSummariesReturnsOnCall[i] = struct {
		result1 []v7action.RouteSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) GetRoutesByOrg(arg1 string, arg2 string) ([]v7action.Route, v7action.Warnings, error) {
	fake.getRoutesByOrgMutex.Lock()
	ret, specificReturn := fake.getRoutesByOrgReturnsOnCall[len(fake.getRoutesByOrgArgsForCall)]
	fake.getRoutesByOrgArgsForCall = append(fake.getRoutesByOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetRoutesByOrg", []interface{}{arg1, arg2})
	fake.getRoutesByOrgMutex.Unlock()
	if fake.GetRoutesByOrgStub != nil {
		return fake.GetRoutesByOrgStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getRoutesByOrgReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRoutesActor) GetRoutesByOrgCallCount() int {
	fake.getRoutesByOrgMutex.RLock()
	defer fake.getRoutesByOrgMutex.RUnlock()
	return len(fake.getRoutesByOrgArgsForCall)
}

func (fake *FakeRoutesActor) GetRoutesByOrgCalls(stub func(string, string) ([]v7action.Route, v7action.Warnings, error)) {
	fake.getRoutesByOrgMutex.Lock()
	defer fake.getRoutesByOrgMutex.Unlock()
	fake.GetRoutesByOrgStub = stub
}

func (fake *FakeRoutesActor) GetRoutesByOrgArgsForCall(i int) (string, string) {
	fake.getRoutesByOrgMutex.RLock()
	defer fake.getRoutesByOrgMutex.RUnlock()
	argsForCall := fake.getRoutesByOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRoutesActor) GetRoutesByOrgReturns(result1 []v7action.Route, result2 v7action.Warnings, result3 error) {
	fake.getRoutesByOrgMutex.Lock()
	defer fake.getRoutesByOrgMutex.Unlock()
	fake.GetRoutesByOrgStub = nil
	fake.getRoutesByOrgReturns = struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) GetRoutesByOrgReturnsOnCall(i int, result1 []v7action.Route, result2 v7action.Warnings, result3 error) {
	fake.getRoutesByOrgMutex.Lock()
	defer fake.getRoutesByOrgMutex.Unlock()
	fake.GetRoutesByOrgStub = nil
	if fake.getRoutesByOrgReturnsOnCall == nil {
		fake.getRoutesByOrgReturnsOnCall = make(map[int]struct {
			result1 []v7action.Route
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getRoutesByOrgReturnsOnCall[i] = struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) GetRoutesBySpace(arg1 string, arg2 string) ([]v7action.Route, v7action.Warnings, error) {
	fake.getRoutesBySpaceMutex.Lock()
	ret, specificReturn := fake.getRoutesBySpaceReturnsOnCall[len(fake.getRoutesBySpaceArgsForCall)]
	fake.getRoutesBySpaceArgsForCall = append(fake.getRoutesBySpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetRoutesBySpace", []interface{}{arg1, arg2})
	fake.getRoutesBySpaceMutex.Unlock()
	if fake.GetRoutesBySpaceStub != nil {
		return fake.GetRoutesBySpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getRoutesBySpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRoutesActor) GetRoutesBySpaceCallCount() int {
	fake.getRoutesBySpaceMutex.RLock()
	defer fake.getRoutesBySpaceMutex.RUnlock()
	return len(fake.getRoutesBySpaceArgsForCall)
}

func (fake *FakeRoutesActor) GetRoutesBySpaceCalls(stub func(string, string) ([]v7action.Route, v7action.Warnings, error)) {
	fake.getRoutesBySpaceMutex.Lock()
	defer fake.getRoutesBySpaceMutex.Unlock()
	fake.GetRoutesBySpaceStub = stub
}

func (fake *FakeRoutesActor) GetRoutesBySpaceArgsForCall(i int) (string, string) {
	fake.getRoutesBySpaceMutex.RLock()
	defer fake.getRoutesBySpaceMutex.RUnlock()
	argsForCall := fake.getRoutesBySpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRoutesActor) GetRoutesBySpaceReturns(result1 []v7action.Route, result2 v7action.Warnings, result3 error) {
	fake.getRoutesBySpaceMutex.Lock()
	defer fake.getRoutesBySpaceMutex.Unlock()
	fake.GetRoutesBySpaceStub = nil
	fake.getRoutesBySpaceReturns = struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) GetRoutesBySpaceReturnsOnCall(i int, result1 []v7action.Route, result2 v7action.Warnings, result3 error) {
	fake.getRoutesBySpaceMutex.Lock()
	defer fake.getRoutesBySpaceMutex.Unlock()
	fake.GetRoutesBySpaceStub = nil
	if fake.getRoutesBySpaceReturnsOnCall == nil {
		fake.getRoutesBySpaceReturnsOnCall = make(map[int]struct {
			result1 []v7action.Route
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getRoutesBySpaceReturnsOnCall[i] = struct {
		result1 []v7action.Route
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRoutesActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRouteSummariesMutex.RLock()
	defer fake.getRouteSummariesMutex.RUnlock()
	fake.getRoutesByOrgMutex.RLock()
	defer fake.getRoutesByOrgMutex.RUnlock()
	fake.getRoutesBySpaceMutex.RLock()
	defer fake.getRoutesBySpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRoutesActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.RoutesActor = new(FakeRoutesActor)
