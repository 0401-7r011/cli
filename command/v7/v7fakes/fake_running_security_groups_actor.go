// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
	"code.cloudfoundry.org/cli/resources"
)

type FakeRunningSecurityGroupsActor struct {
	GetGlobalRunningSecurityGroupsStub        func() ([]resources.SecurityGroup, v7action.Warnings, error)
	getGlobalRunningSecurityGroupsMutex       sync.RWMutex
	getGlobalRunningSecurityGroupsArgsForCall []struct {
	}
	getGlobalRunningSecurityGroupsReturns struct {
		result1 []resources.SecurityGroup
		result2 v7action.Warnings
		result3 error
	}
	getGlobalRunningSecurityGroupsReturnsOnCall map[int]struct {
		result1 []resources.SecurityGroup
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunningSecurityGroupsActor) GetGlobalRunningSecurityGroups() ([]resources.SecurityGroup, v7action.Warnings, error) {
	fake.getGlobalRunningSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.getGlobalRunningSecurityGroupsReturnsOnCall[len(fake.getGlobalRunningSecurityGroupsArgsForCall)]
	fake.getGlobalRunningSecurityGroupsArgsForCall = append(fake.getGlobalRunningSecurityGroupsArgsForCall, struct {
	}{})
	fake.recordInvocation("GetGlobalRunningSecurityGroups", []interface{}{})
	fake.getGlobalRunningSecurityGroupsMutex.Unlock()
	if fake.GetGlobalRunningSecurityGroupsStub != nil {
		return fake.GetGlobalRunningSecurityGroupsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getGlobalRunningSecurityGroupsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRunningSecurityGroupsActor) GetGlobalRunningSecurityGroupsCallCount() int {
	fake.getGlobalRunningSecurityGroupsMutex.RLock()
	defer fake.getGlobalRunningSecurityGroupsMutex.RUnlock()
	return len(fake.getGlobalRunningSecurityGroupsArgsForCall)
}

func (fake *FakeRunningSecurityGroupsActor) GetGlobalRunningSecurityGroupsCalls(stub func() ([]resources.SecurityGroup, v7action.Warnings, error)) {
	fake.getGlobalRunningSecurityGroupsMutex.Lock()
	defer fake.getGlobalRunningSecurityGroupsMutex.Unlock()
	fake.GetGlobalRunningSecurityGroupsStub = stub
}

func (fake *FakeRunningSecurityGroupsActor) GetGlobalRunningSecurityGroupsReturns(result1 []resources.SecurityGroup, result2 v7action.Warnings, result3 error) {
	fake.getGlobalRunningSecurityGroupsMutex.Lock()
	defer fake.getGlobalRunningSecurityGroupsMutex.Unlock()
	fake.GetGlobalRunningSecurityGroupsStub = nil
	fake.getGlobalRunningSecurityGroupsReturns = struct {
		result1 []resources.SecurityGroup
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunningSecurityGroupsActor) GetGlobalRunningSecurityGroupsReturnsOnCall(i int, result1 []resources.SecurityGroup, result2 v7action.Warnings, result3 error) {
	fake.getGlobalRunningSecurityGroupsMutex.Lock()
	defer fake.getGlobalRunningSecurityGroupsMutex.Unlock()
	fake.GetGlobalRunningSecurityGroupsStub = nil
	if fake.getGlobalRunningSecurityGroupsReturnsOnCall == nil {
		fake.getGlobalRunningSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 []resources.SecurityGroup
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getGlobalRunningSecurityGroupsReturnsOnCall[i] = struct {
		result1 []resources.SecurityGroup
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRunningSecurityGroupsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getGlobalRunningSecurityGroupsMutex.RLock()
	defer fake.getGlobalRunningSecurityGroupsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunningSecurityGroupsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.RunningSecurityGroupsActor = new(FakeRunningSecurityGroupsActor)
