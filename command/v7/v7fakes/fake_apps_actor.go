// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeAppsActor struct {
	GetAppSummariesForSpaceStub        func(string, string) ([]v7action.ApplicationSummary, v7action.Warnings, error)
	getAppSummariesForSpaceMutex       sync.RWMutex
	getAppSummariesForSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getAppSummariesForSpaceReturns struct {
		result1 []v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}
	getAppSummariesForSpaceReturnsOnCall map[int]struct {
		result1 []v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppsActor) GetAppSummariesForSpace(arg1 string, arg2 string) ([]v7action.ApplicationSummary, v7action.Warnings, error) {
	fake.getAppSummariesForSpaceMutex.Lock()
	ret, specificReturn := fake.getAppSummariesForSpaceReturnsOnCall[len(fake.getAppSummariesForSpaceArgsForCall)]
	fake.getAppSummariesForSpaceArgsForCall = append(fake.getAppSummariesForSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetAppSummariesForSpace", []interface{}{arg1, arg2})
	fake.getAppSummariesForSpaceMutex.Unlock()
	if fake.GetAppSummariesForSpaceStub != nil {
		return fake.GetAppSummariesForSpaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getAppSummariesForSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAppsActor) GetAppSummariesForSpaceCallCount() int {
	fake.getAppSummariesForSpaceMutex.RLock()
	defer fake.getAppSummariesForSpaceMutex.RUnlock()
	return len(fake.getAppSummariesForSpaceArgsForCall)
}

func (fake *FakeAppsActor) GetAppSummariesForSpaceCalls(stub func(string, string) ([]v7action.ApplicationSummary, v7action.Warnings, error)) {
	fake.getAppSummariesForSpaceMutex.Lock()
	defer fake.getAppSummariesForSpaceMutex.Unlock()
	fake.GetAppSummariesForSpaceStub = stub
}

func (fake *FakeAppsActor) GetAppSummariesForSpaceArgsForCall(i int) (string, string) {
	fake.getAppSummariesForSpaceMutex.RLock()
	defer fake.getAppSummariesForSpaceMutex.RUnlock()
	argsForCall := fake.getAppSummariesForSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppsActor) GetAppSummariesForSpaceReturns(result1 []v7action.ApplicationSummary, result2 v7action.Warnings, result3 error) {
	fake.getAppSummariesForSpaceMutex.Lock()
	defer fake.getAppSummariesForSpaceMutex.Unlock()
	fake.GetAppSummariesForSpaceStub = nil
	fake.getAppSummariesForSpaceReturns = struct {
		result1 []v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppsActor) GetAppSummariesForSpaceReturnsOnCall(i int, result1 []v7action.ApplicationSummary, result2 v7action.Warnings, result3 error) {
	fake.getAppSummariesForSpaceMutex.Lock()
	defer fake.getAppSummariesForSpaceMutex.Unlock()
	fake.GetAppSummariesForSpaceStub = nil
	if fake.getAppSummariesForSpaceReturnsOnCall == nil {
		fake.getAppSummariesForSpaceReturnsOnCall = make(map[int]struct {
			result1 []v7action.ApplicationSummary
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.getAppSummariesForSpaceReturnsOnCall[i] = struct {
		result1 []v7action.ApplicationSummary
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppsActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppSummariesForSpaceMutex.RLock()
	defer fake.getAppSummariesForSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppsActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.AppsActor = new(FakeAppsActor)
