// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeRenameOrganizationActor struct {
	RenameOrganizationStub        func(string, string) (v7action.Organization, v7action.Warnings, error)
	renameOrganizationMutex       sync.RWMutex
	renameOrganizationArgsForCall []struct {
		arg1 string
		arg2 string
	}
	renameOrganizationReturns struct {
		result1 v7action.Organization
		result2 v7action.Warnings
		result3 error
	}
	renameOrganizationReturnsOnCall map[int]struct {
		result1 v7action.Organization
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRenameOrganizationActor) RenameOrganization(arg1 string, arg2 string) (v7action.Organization, v7action.Warnings, error) {
	fake.renameOrganizationMutex.Lock()
	ret, specificReturn := fake.renameOrganizationReturnsOnCall[len(fake.renameOrganizationArgsForCall)]
	fake.renameOrganizationArgsForCall = append(fake.renameOrganizationArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("RenameOrganization", []interface{}{arg1, arg2})
	fake.renameOrganizationMutex.Unlock()
	if fake.RenameOrganizationStub != nil {
		return fake.RenameOrganizationStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.renameOrganizationReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRenameOrganizationActor) RenameOrganizationCallCount() int {
	fake.renameOrganizationMutex.RLock()
	defer fake.renameOrganizationMutex.RUnlock()
	return len(fake.renameOrganizationArgsForCall)
}

func (fake *FakeRenameOrganizationActor) RenameOrganizationCalls(stub func(string, string) (v7action.Organization, v7action.Warnings, error)) {
	fake.renameOrganizationMutex.Lock()
	defer fake.renameOrganizationMutex.Unlock()
	fake.RenameOrganizationStub = stub
}

func (fake *FakeRenameOrganizationActor) RenameOrganizationArgsForCall(i int) (string, string) {
	fake.renameOrganizationMutex.RLock()
	defer fake.renameOrganizationMutex.RUnlock()
	argsForCall := fake.renameOrganizationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRenameOrganizationActor) RenameOrganizationReturns(result1 v7action.Organization, result2 v7action.Warnings, result3 error) {
	fake.renameOrganizationMutex.Lock()
	defer fake.renameOrganizationMutex.Unlock()
	fake.RenameOrganizationStub = nil
	fake.renameOrganizationReturns = struct {
		result1 v7action.Organization
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameOrganizationActor) RenameOrganizationReturnsOnCall(i int, result1 v7action.Organization, result2 v7action.Warnings, result3 error) {
	fake.renameOrganizationMutex.Lock()
	defer fake.renameOrganizationMutex.Unlock()
	fake.RenameOrganizationStub = nil
	if fake.renameOrganizationReturnsOnCall == nil {
		fake.renameOrganizationReturnsOnCall = make(map[int]struct {
			result1 v7action.Organization
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.renameOrganizationReturnsOnCall[i] = struct {
		result1 v7action.Organization
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameOrganizationActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renameOrganizationMutex.RLock()
	defer fake.renameOrganizationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRenameOrganizationActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.RenameOrganizationActor = new(FakeRenameOrganizationActor)
