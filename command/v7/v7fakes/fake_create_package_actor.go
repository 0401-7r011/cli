// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeCreatePackageActor struct {
	CreateAndUploadBitsPackageByApplicationNameAndSpaceStub        func(string, string, string) (v7action.Package, v7action.Warnings, error)
	createAndUploadBitsPackageByApplicationNameAndSpaceMutex       sync.RWMutex
	createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	createAndUploadBitsPackageByApplicationNameAndSpaceReturns struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}
	createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}
	CreateDockerPackageByApplicationNameAndSpaceStub        func(string, string, v7action.DockerImageCredentials) (v7action.Package, v7action.Warnings, error)
	createDockerPackageByApplicationNameAndSpaceMutex       sync.RWMutex
	createDockerPackageByApplicationNameAndSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v7action.DockerImageCredentials
	}
	createDockerPackageByApplicationNameAndSpaceReturns struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}
	createDockerPackageByApplicationNameAndSpaceReturnsOnCall map[int]struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpace(arg1 string, arg2 string, arg3 string) (v7action.Package, v7action.Warnings, error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall[len(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall)]
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall = append(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateAndUploadBitsPackageByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	if fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub != nil {
		return fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceCallCount() int {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceCalls(stub func(string, string, string) (v7action.Package, v7action.Warnings, error)) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = stub
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall(i int) (string, string, string) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.createAndUploadBitsPackageByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceReturns(result1 v7action.Package, result2 v7action.Warnings, result3 error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = nil
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturns = struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreatePackageActor) CreateAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall(i int, result1 v7action.Package, result2 v7action.Warnings, result3 error) {
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateAndUploadBitsPackageByApplicationNameAndSpaceStub = nil
	if fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v7action.Package
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpace(arg1 string, arg2 string, arg3 v7action.DockerImageCredentials) (v7action.Package, v7action.Warnings, error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	ret, specificReturn := fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall[len(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall)]
	fake.createDockerPackageByApplicationNameAndSpaceArgsForCall = append(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v7action.DockerImageCredentials
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateDockerPackageByApplicationNameAndSpace", []interface{}{arg1, arg2, arg3})
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	if fake.CreateDockerPackageByApplicationNameAndSpaceStub != nil {
		return fake.CreateDockerPackageByApplicationNameAndSpaceStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.createDockerPackageByApplicationNameAndSpaceReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpaceCallCount() int {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	return len(fake.createDockerPackageByApplicationNameAndSpaceArgsForCall)
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpaceCalls(stub func(string, string, v7action.DockerImageCredentials) (v7action.Package, v7action.Warnings, error)) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = stub
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpaceArgsForCall(i int) (string, string, v7action.DockerImageCredentials) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	argsForCall := fake.createDockerPackageByApplicationNameAndSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpaceReturns(result1 v7action.Package, result2 v7action.Warnings, result3 error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = nil
	fake.createDockerPackageByApplicationNameAndSpaceReturns = struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreatePackageActor) CreateDockerPackageByApplicationNameAndSpaceReturnsOnCall(i int, result1 v7action.Package, result2 v7action.Warnings, result3 error) {
	fake.createDockerPackageByApplicationNameAndSpaceMutex.Lock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.Unlock()
	fake.CreateDockerPackageByApplicationNameAndSpaceStub = nil
	if fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall == nil {
		fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall = make(map[int]struct {
			result1 v7action.Package
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.createDockerPackageByApplicationNameAndSpaceReturnsOnCall[i] = struct {
		result1 v7action.Package
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeCreatePackageActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createAndUploadBitsPackageByApplicationNameAndSpaceMutex.RUnlock()
	fake.createDockerPackageByApplicationNameAndSpaceMutex.RLock()
	defer fake.createDockerPackageByApplicationNameAndSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCreatePackageActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.CreatePackageActor = new(FakeCreatePackageActor)
