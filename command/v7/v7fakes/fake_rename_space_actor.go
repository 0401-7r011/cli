// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeRenameSpaceActor struct {
	RenameSpaceByNameAndOrganizationGUIDStub        func(string, string, string) (v7action.Space, v7action.Warnings, error)
	renameSpaceByNameAndOrganizationGUIDMutex       sync.RWMutex
	renameSpaceByNameAndOrganizationGUIDArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	renameSpaceByNameAndOrganizationGUIDReturns struct {
		result1 v7action.Space
		result2 v7action.Warnings
		result3 error
	}
	renameSpaceByNameAndOrganizationGUIDReturnsOnCall map[int]struct {
		result1 v7action.Space
		result2 v7action.Warnings
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUID(arg1 string, arg2 string, arg3 string) (v7action.Space, v7action.Warnings, error) {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.Lock()
	ret, specificReturn := fake.renameSpaceByNameAndOrganizationGUIDReturnsOnCall[len(fake.renameSpaceByNameAndOrganizationGUIDArgsForCall)]
	fake.renameSpaceByNameAndOrganizationGUIDArgsForCall = append(fake.renameSpaceByNameAndOrganizationGUIDArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("RenameSpaceByNameAndOrganizationGUID", []interface{}{arg1, arg2, arg3})
	fake.renameSpaceByNameAndOrganizationGUIDMutex.Unlock()
	if fake.RenameSpaceByNameAndOrganizationGUIDStub != nil {
		return fake.RenameSpaceByNameAndOrganizationGUIDStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.renameSpaceByNameAndOrganizationGUIDReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUIDCallCount() int {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.RLock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.RUnlock()
	return len(fake.renameSpaceByNameAndOrganizationGUIDArgsForCall)
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUIDCalls(stub func(string, string, string) (v7action.Space, v7action.Warnings, error)) {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.Lock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.Unlock()
	fake.RenameSpaceByNameAndOrganizationGUIDStub = stub
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUIDArgsForCall(i int) (string, string, string) {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.RLock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.RUnlock()
	argsForCall := fake.renameSpaceByNameAndOrganizationGUIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUIDReturns(result1 v7action.Space, result2 v7action.Warnings, result3 error) {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.Lock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.Unlock()
	fake.RenameSpaceByNameAndOrganizationGUIDStub = nil
	fake.renameSpaceByNameAndOrganizationGUIDReturns = struct {
		result1 v7action.Space
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameSpaceActor) RenameSpaceByNameAndOrganizationGUIDReturnsOnCall(i int, result1 v7action.Space, result2 v7action.Warnings, result3 error) {
	fake.renameSpaceByNameAndOrganizationGUIDMutex.Lock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.Unlock()
	fake.RenameSpaceByNameAndOrganizationGUIDStub = nil
	if fake.renameSpaceByNameAndOrganizationGUIDReturnsOnCall == nil {
		fake.renameSpaceByNameAndOrganizationGUIDReturnsOnCall = make(map[int]struct {
			result1 v7action.Space
			result2 v7action.Warnings
			result3 error
		})
	}
	fake.renameSpaceByNameAndOrganizationGUIDReturnsOnCall[i] = struct {
		result1 v7action.Space
		result2 v7action.Warnings
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeRenameSpaceActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renameSpaceByNameAndOrganizationGUIDMutex.RLock()
	defer fake.renameSpaceByNameAndOrganizationGUIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRenameSpaceActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.RenameSpaceActor = new(FakeRenameSpaceActor)
