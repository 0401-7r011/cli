// Code generated by counterfeiter. DO NOT EDIT.
package v7fakes

import (
	"sync"

	"code.cloudfoundry.org/cli/actor/v7action"
	"code.cloudfoundry.org/cli/api/cloudcontroller/ccv3"
	"code.cloudfoundry.org/cli/api/cloudcontroller/ccv3/constant"
	v7 "code.cloudfoundry.org/cli/command/v7"
)

type FakeSetStagingEnvironmentVariableGroupActor struct {
	SetEnvironmentVariableGroupStub        func(constant.EnvironmentVariableGroupName, ccv3.EnvironmentVariables) (v7action.Warnings, error)
	setEnvironmentVariableGroupMutex       sync.RWMutex
	setEnvironmentVariableGroupArgsForCall []struct {
		arg1 constant.EnvironmentVariableGroupName
		arg2 ccv3.EnvironmentVariables
	}
	setEnvironmentVariableGroupReturns struct {
		result1 v7action.Warnings
		result2 error
	}
	setEnvironmentVariableGroupReturnsOnCall map[int]struct {
		result1 v7action.Warnings
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroup(arg1 constant.EnvironmentVariableGroupName, arg2 ccv3.EnvironmentVariables) (v7action.Warnings, error) {
	fake.setEnvironmentVariableGroupMutex.Lock()
	ret, specificReturn := fake.setEnvironmentVariableGroupReturnsOnCall[len(fake.setEnvironmentVariableGroupArgsForCall)]
	fake.setEnvironmentVariableGroupArgsForCall = append(fake.setEnvironmentVariableGroupArgsForCall, struct {
		arg1 constant.EnvironmentVariableGroupName
		arg2 ccv3.EnvironmentVariables
	}{arg1, arg2})
	fake.recordInvocation("SetEnvironmentVariableGroup", []interface{}{arg1, arg2})
	fake.setEnvironmentVariableGroupMutex.Unlock()
	if fake.SetEnvironmentVariableGroupStub != nil {
		return fake.SetEnvironmentVariableGroupStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setEnvironmentVariableGroupReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroupCallCount() int {
	fake.setEnvironmentVariableGroupMutex.RLock()
	defer fake.setEnvironmentVariableGroupMutex.RUnlock()
	return len(fake.setEnvironmentVariableGroupArgsForCall)
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroupCalls(stub func(constant.EnvironmentVariableGroupName, ccv3.EnvironmentVariables) (v7action.Warnings, error)) {
	fake.setEnvironmentVariableGroupMutex.Lock()
	defer fake.setEnvironmentVariableGroupMutex.Unlock()
	fake.SetEnvironmentVariableGroupStub = stub
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroupArgsForCall(i int) (constant.EnvironmentVariableGroupName, ccv3.EnvironmentVariables) {
	fake.setEnvironmentVariableGroupMutex.RLock()
	defer fake.setEnvironmentVariableGroupMutex.RUnlock()
	argsForCall := fake.setEnvironmentVariableGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroupReturns(result1 v7action.Warnings, result2 error) {
	fake.setEnvironmentVariableGroupMutex.Lock()
	defer fake.setEnvironmentVariableGroupMutex.Unlock()
	fake.SetEnvironmentVariableGroupStub = nil
	fake.setEnvironmentVariableGroupReturns = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) SetEnvironmentVariableGroupReturnsOnCall(i int, result1 v7action.Warnings, result2 error) {
	fake.setEnvironmentVariableGroupMutex.Lock()
	defer fake.setEnvironmentVariableGroupMutex.Unlock()
	fake.SetEnvironmentVariableGroupStub = nil
	if fake.setEnvironmentVariableGroupReturnsOnCall == nil {
		fake.setEnvironmentVariableGroupReturnsOnCall = make(map[int]struct {
			result1 v7action.Warnings
			result2 error
		})
	}
	fake.setEnvironmentVariableGroupReturnsOnCall[i] = struct {
		result1 v7action.Warnings
		result2 error
	}{result1, result2}
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setEnvironmentVariableGroupMutex.RLock()
	defer fake.setEnvironmentVariableGroupMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSetStagingEnvironmentVariableGroupActor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v7.SetStagingEnvironmentVariableGroupActor = new(FakeSetStagingEnvironmentVariableGroupActor)
